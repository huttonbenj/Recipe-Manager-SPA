name: CI/CD Pipeline (Lite)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # Combined job to reduce minutes usage
  build-and-test:
    name: Build, Test & Quality Check
    runs-on: ubuntu-latest
    # Only run on relevant changes to save minutes
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: recipe_manager_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Code Quality Checks
      - name: Run ESLint (Frontend)
        run: npm run lint --prefix apps/frontend

      - name: Run ESLint (Backend) 
        run: npm run lint --prefix apps/backend

      - name: Build shared packages
        run: npm run build --prefix packages/shared-types

      - name: Generate Prisma Client
        run: npm run db:generate --prefix apps/backend

      - name: Generate Test Prisma Client
        run: npx prisma generate --schema=tests/test-schema.prisma
        working-directory: apps/backend

      - name: TypeScript Check (Frontend)
        run: npm run type-check --prefix apps/frontend

      - name: TypeScript Check (Backend)
        run: npm run type-check --prefix apps/backend

      # Test Suite
      - name: Create .env.test for Frontend
        run: echo "VITE_API_BASE_URL=http://localhost:10000/api" > apps/frontend/.env.test

      - name: Run Tests (Frontend)
        run: npm test --prefix apps/frontend

      - name: Run Tests (Backend)
        run: npm test --prefix apps/backend

      # Security Scanning (lightweight)
      - name: Security Audit
        run: npm audit --audit-level=high

      - name: Check for sensitive files
        run: |
          echo "üîç Searching for .env files..."
          echo "Current directory: $(pwd)"
          echo "Current branch: $(git branch --show-current)"
          echo "Git status:"
          git status --porcelain
          
          echo "üîç Searching for any .env* files:"
          find . -name ".env*" -not -path "./node_modules/*" -type f | while read -r file; do
            echo "Found: $file"
            echo "  Size: $(ls -lh "$file" | awk '{print $5}')"
            echo "  Git status: $(git status --porcelain "$file" || echo 'not tracked')"
          done
          
          echo "üîç Specifically checking for .env files:"
          env_files=$(find . -name ".env" -not -path "./node_modules/*" -type f)
          if [ -n "$env_files" ]; then
            echo "‚ùå Found .env files in repository:"
            echo "$env_files" | while read -r file; do
              echo "  üìÅ $file"
              echo "     Size: $(ls -lh "$file" | awk '{print $5}')"
              echo "     Git tracked: $(git ls-files "$file" | wc -l | xargs test 1 -eq && echo 'YES' || echo 'NO')"
              echo "     First few lines:"
              head -3 "$file" | sed 's/^/       /'
            done
            exit 1
          fi
          echo "‚úÖ No .env files found"

      # Frontend Tests
      - name: Run Frontend Tests
        run: npm run test --prefix apps/frontend

      # Backend Tests
      - name: Setup test database
        run: |
          npm run db:generate --prefix apps/backend
          npm run db:migrate --prefix apps/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/recipe_manager_test

      - name: Run Backend Tests
        run: npm run test --prefix apps/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/recipe_manager_test
          JWT_SECRET: test-secret-key-for-ci-only-minimum-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-only-minimum-32-chars

      # Build Applications
      - name: Build Frontend
        run: npm run build --prefix apps/frontend

      - name: Build Backend
        run: npm run build --prefix apps/backend

      # Simple deployment notification
      - name: Deployment Status
        if: github.ref == 'refs/heads/main'
        run: |
          echo "‚úÖ All checks passed! Ready for deployment."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

  # Minimal Docker build (only on main branch to save minutes)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Frontend Docker Image
        run: |
          docker build -f apps/frontend/Dockerfile.prod -t recipe-frontend .
          echo "‚úÖ Frontend Docker image built successfully"

      - name: Build Backend Docker Image  
        run: |
          docker build -f apps/backend/Dockerfile.prod -t recipe-backend .
          echo "‚úÖ Backend Docker image built successfully" 