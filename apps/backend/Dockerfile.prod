# Multi-stage build for Node.js backend
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy root package files for workspace setup
COPY package*.json ./
COPY apps/backend/package*.json ./apps/backend/
COPY packages/shared-types ./packages/shared-types/

# Install ALL dependencies (including devDependencies for build)
RUN npm ci --workspace=apps/backend --workspace=packages/shared-types --ignore-scripts

# Build shared-types package first (required for backend imports)
RUN npm run build --workspace=packages/shared-types

# Copy source code
COPY apps/backend/ ./apps/backend/

# Generate Prisma client
WORKDIR /app/apps/backend
RUN npx prisma generate --schema=src/prisma/schema.prisma

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install security updates and curl for health checks
RUN apk --no-cache add ca-certificates curl && \
    apk --no-cache upgrade

# Set working directory
WORKDIR /app

# Copy root package files for workspace setup
COPY package*.json ./
COPY apps/backend/package*.json ./apps/backend/
COPY packages/shared-types ./packages/shared-types/

# Install only production dependencies
RUN npm ci --workspace=apps/backend --omit=dev --ignore-scripts && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/apps/backend/dist ./dist
COPY --from=builder /app/apps/backend/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/apps/backend/src/prisma ./src/prisma

# Copy uploads directory structure
RUN mkdir -p uploads logs

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Set permissions
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# Start the application
CMD ["node", "dist/server.js"] 